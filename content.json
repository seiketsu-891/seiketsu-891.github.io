{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/12/14/hello-world/"},{"title":"Leetcode 1 Two Sum","text":"question:Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have *exactly* one solution, and you may not use the same element twice. You can return the answer in any order. basic ideaThe simplest but not so efficient method is to iterate the array and for every item in the array, we iterate the items after it and to check if we could get the the sum we want. Time complexity of this method would be O(n^2). So how do we make the solution more efficient? Let’s look at an example. If the input is [2, 11, 15, 6], and the target is 8. We iterate the input array and when the current item is 2, we expect to find 6. we can use a map to save the index of the item 2 and the number we expect to find, which is 6. When the current items becomes 6, we check the map and find it’s just what we wanted. my solution123456789101112131415161718class Solution { public int[] twoSum(int[] nums, int target) { int[] res = new int[2]; Map&lt;Integer, Integer&gt; map = new HashMap(); for(int i = 0; i &lt; nums.length; i++){ int curr = nums[i]; if(i &gt; 0 &amp;&amp; map.containsKey(curr)){ res[0] = map.get(curr); res[1] = i; return res; } map.put(target - nums[i], i); } return res; }} time complexity: O(n) - in the worst scenario, we need to interate the whole array once space complexity: O(n) - we need an extra map","link":"/2022/12/14/Leetcode-1-Two-Sum/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","link":"/tags/Leetcode/"}],"categories":[{"name":"Leetcode","slug":"Leetcode","link":"/categories/Leetcode/"}],"pages":[]}